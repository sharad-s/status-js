{"version":3,"sources":["../src/mailservers.ts"],"names":["Topics","constants","topics","MailServers","constructor","web3","mailserver","symKeyID","useMailserver","enode","cb","shh","generateSymKeyFromPassword","currentProvider","send","id","Date","getTime","jsonrpc","method","params","err","res","result","setTimeout","markTrustedPeer","then","catch","e","requestUserMessages","options","requestChannelMessages","CONTACT_DISCOVERY_TOPIC","topic","slice","utils","sha3","mailserverPeer","timeout","from","to","limit"],"mappings":";;;;;;;;;AAAA;;AAEA,MAAMA,MAAM,GAAGC,mBAAUC,MAAzB;;AAEA,MAAMC,WAAN,CAAkB;AAKhBC,EAAAA,WAAW,CAACC,IAAD,EAAY;AAAA,SAJfA,IAIe;AAAA,SAHfC,UAGe,GAHM,EAGN;AAAA,SAFfC,QAEe,GAFI,EAEJ;AACrB,SAAKF,IAAL,GAAYA,IAAZ;AACD;;AAED,QAAaG,aAAb,CAA2BC,KAA3B,EAA0CC,EAA1C,EAAoD;AAClD,SAAKH,QAAL,GAAgB,MAAM,KAAKF,IAAL,CAAUM,GAAV,CAAcC,0BAAd,CAAyC,sBAAzC,CAAtB;AAEA,SAAKP,IAAL,CAAUQ,eAAV,CAA0BC,IAA1B,CAA+B;AAC7BC,MAAAA,EAAE,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EADyB;AAE7BC,MAAAA,OAAO,EAAE,KAFoB;AAG7BC,MAAAA,MAAM,EAAE,eAHqB;AAI7BC,MAAAA,MAAM,EAAE,CAACX,KAAD;AAJqB,KAA/B,EAMA,CAACY,GAAD,EAAWC,GAAX,KAAwB;AACtB,UAAID,GAAJ,EAAS;AACP,YAAIX,EAAJ,EAAQ;AACN,iBAAOA,EAAE,CAACW,GAAD,EAAM,KAAN,CAAT;AACD;;AACD;AACD;;AAED,UAAI,CAACC,GAAG,CAACC,MAAT,EAAiB;AACf,YAAIb,EAAJ,EAAQ;AACN,iBAAOA,EAAE,CAACW,GAAD,EAAM,KAAN,CAAT;AACD;;AACD;AACD;;AAEDG,MAAAA,UAAU,CAAC,MAAM;AACf,aAAKnB,IAAL,CAAUM,GAAV,CAAcc,eAAd,CAA8BhB,KAA9B,EACCiB,IADD,CACM,MAAM;AACV,eAAKpB,UAAL,GAAkBG,KAAlB;;AACA,cAAI,CAACC,EAAL,EAAS;AACP,mBAAO,IAAP;AACD;;AACDA,UAAAA,EAAE,CAAC,IAAD,EAAO,IAAP,CAAF;AACD,SAPD,EAOGiB,KAPH,CAOUC,CAAD,IAAa;AACpB,cAAI,CAAClB,EAAL,EAAS;AACP;AACD;;AACDA,UAAAA,EAAE,CAACkB,CAAD,EAAI,KAAJ,CAAF;AACD,SAZD;AAaD,OAdS,EAcP,IAdO,CAAV;AAeD,KApCD;AAqCD;;AAED,QAAaC,mBAAb,CAAiCC,OAAjC,EAA+CpB,EAA/C,EAAyD;AACvD,UAAM,KAAKqB,sBAAL,CAA4B9B,mBAAUC,MAAV,CAAiB8B,uBAA7C,EAAsEF,OAAtE,EAA+EpB,EAA/E,CAAN;AACD;;AAED,QAAaqB,sBAAb,CAAoCE,KAApC,EAA0DH,OAA1D,EAAwEpB,EAAxE,EAAkF;AAChF,QAAI,KAAKJ,UAAL,KAAoB,EAAxB,EAA4B;AAC1B,UAAI,CAACI,EAAL,EAAS;AACP;AACD;;AACD,aAAOA,EAAE,CAAC,uBAAD,EAA0B,KAA1B,CAAT;AACD;;AAED,UAAMR,MAAM,GAAG,CAAE+B,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAe,CAAf,MAAsB,IAAtB,GAA6BD,KAA7B,GAAqC,KAAK5B,IAAL,CAAU8B,KAAV,CAAgBC,IAAhB,CAAqBH,KAArB,EAA4BC,KAA5B,CAAkC,CAAlC,EAAqC,EAArC,CAAvC,CAAf;AAEA,UAAMG,cAAc,GAAG,KAAK/B,UAA5B;AAEA,UAAMgC,OAAO,GAAGR,OAAO,CAACQ,OAAR,IAAmB,EAAnC,CAZgF,CAYzC;;AACvC,UAAM/B,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMgC,IAAI,GAAGT,OAAO,CAACS,IAAR,IAAgB,CAA7B,CAdgF,CAchD;;AAChC,UAAMC,EAAE,GAAGV,OAAO,CAACU,EAAR,IAAc,CAAzB;AACA,UAAMC,KAAK,GAAGX,OAAO,CAACW,KAAR,IAAiB,CAA/B;AAEA,SAAKpC,IAAL,CAAUQ,eAAV,CAA0BC,IAA1B,CAA+B;AAC7BC,MAAAA,EAAE,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EADyB;AAE7BC,MAAAA,OAAO,EAAE,KAFoB;AAG7BC,MAAAA,MAAM,EAAE,wBAHqB;AAI7BC,MAAAA,MAAM,EAAE,CACN;AACEmB,QAAAA,IADF;AAEEE,QAAAA,KAFF;AAGEJ,QAAAA,cAHF;AAIE9B,QAAAA,QAJF;AAKE+B,QAAAA,OALF;AAMEE,QAAAA,EANF;AAOEtC,QAAAA;AAPF,OADM;AAJqB,KAA/B,EAgBA,CAACmB,GAAD,EAAYC,GAAZ,KAA0B;AACxB,UAAID,GAAJ,EAAS;AACP,YAAIX,EAAJ,EAAQ;AACN,iBAAOA,EAAE,CAACW,GAAD,CAAT;AACD;;AACD,eAAO,KAAP;AACD;;AAED,UAAIX,EAAJ,EAAQ;AACP,eAAOA,EAAE,CAAC,IAAD,EAAO,IAAP,CAAT;AACA;;AACD,aAAO,IAAP;AACD,KA5BD;AA6BD;;AAtGe;;eAyGHP,W","sourcesContent":["import constants from \"./constants.js\";\n\nconst Topics = constants.topics;\n\nclass MailServers {\n  private web3: any;\n  private mailserver: string = \"\";\n  private symKeyID: string = \"\";\n\n  constructor(web3: any) {\n    this.web3 = web3;\n  }\n\n  public async useMailserver(enode: string, cb?: any) {\n    this.symKeyID = await this.web3.shh.generateSymKeyFromPassword(\"status-offline-inbox\");\n\n    this.web3.currentProvider.send({\n      id: new Date().getTime(),\n      jsonrpc: \"2.0\",\n      method: \"admin_addPeer\",\n      params: [enode],\n    },\n    (err: any, res: any) => {\n      if (err) {\n        if (cb) {\n          return cb(err, false);\n        }\n        return;\n      }\n\n      if (!res.result) {\n        if (cb) {\n          return cb(err, false);\n        }\n        return;\n      }\n\n      setTimeout(() => {\n        this.web3.shh.markTrustedPeer(enode)\n        .then(() => {\n          this.mailserver = enode;\n          if (!cb) {\n            return true;\n          }\n          cb(null, true);\n        }).catch((e?: any) => {\n          if (!cb) {\n            return;\n          }\n          cb(e, false);\n        });\n      }, 1000);\n    });\n  }\n\n  public async requestUserMessages(options: any, cb?: any) {\n    await this.requestChannelMessages(constants.topics.CONTACT_DISCOVERY_TOPIC, options, cb);\n  }\n\n  public async requestChannelMessages(topic: string|Topics, options: any, cb?: any) {\n    if (this.mailserver === \"\") {\n      if (!cb) {\n        return;\n      }\n      return cb(\"Mailserver is not set\", false);\n    }\n\n    const topics = [ topic.slice(0, 2) === \"0x\" ? topic : this.web3.utils.sha3(topic).slice(0, 10)];\n    \n    const mailserverPeer = this.mailserver;\n\n    const timeout = options.timeout || 30; // seconds\n    const symKeyID = this.symKeyID;\n    const from = options.from || 0; // unix timestamp\n    const to = options.to || 0;\n    const limit = options.limit || 0;\n\n    this.web3.currentProvider.send({\n      id: new Date().getTime(),\n      jsonrpc: \"2.0\",\n      method: \"shhext_requestMessages\",\n      params: [\n        {\n          from,\n          limit,\n          mailserverPeer,\n          symKeyID,\n          timeout,\n          to,\n          topics,\n        },\n      ],\n    },\n    (err?: any, res?: any) => {\n      if (err) {\n        if (cb) {\n          return cb(err);\n        }\n        return false;\n      }\n\n      if (cb) {\n       return cb(null, true);\n      }\n      return true;\n    });\n  }\n}\n\nexport default MailServers;\n"],"file":"mailservers.js"}