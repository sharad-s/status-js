{"version":3,"sources":["../src/index.ts"],"names":["Web3","require","utils","asciiToHex","hexToAscii","createStatusPayload","content","messageType","clockValue","isJson","tag","constants","messageTags","message","oneMonthInMs","Date","getTime","contentType","timestamp","sig","StatusJS","constructor","channels","contacts","userMessagesSubscription","mailservers","isHttpProvider","shh","chatRequestCb","connect","url","privateKey","web3","startsWith","setProvider","providers","WebsocketProvider","headers","Origin","HttpProvider","net","IpcProvider","setMinPoW","post","POW_TARGET","set","generateWhisperKeyFromWallet","newKeyPair","isConnected","isListening","key","keyId","addPrivateKey","getPublicKey","pubKey","get","getKeyId","getUserName","generateUsernameFromSeed","joinChat","channelName","cb","channelKey","generateSymKeyFromPassword","channelCode","sha3","slice","lastClockValue","addContact","contactCode","username","leaveChat","subscription","unsubscribe","deleteMessageFilter","filterId","then","clearInterval","interval","removeContact","isSubscribedTo","onMessage","par1","par2","onUserMessage","onChannelMessage","onChatRequest","filters","allowP2P","symKeyID","topics","messageHandler","data","payloadArray","JSON","parse","payload","newMessageFilter","setInterval","getFilterMessages","map","d","catch","err","subscribe","on","minPow","privateKeyID","CONTACT_DISCOVERY_TOPIC","chatRequest","displayName","profilePic","sendUserMessage","msg","messageTypes","USER_MESSAGE","powTarget","powTime","POW_TIME","topic","ttl","TTL","e","sendGroupMessage","GROUP_MESSAGE","sendJsonMessage","destination","regExp","CONTACT_CODE_REGEXP","test","sendMessage","module","exports"],"mappings":"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","sourcesContent":["const Web3 = require(\"web3\");\nimport utils from \"./utils.js\";\nimport mailservers from \"./mailservers.js\";\nimport constants from \"./constants.js\";\n\nconst { utils: { asciiToHex, hexToAscii  }  } = Web3;\n\nfunction createStatusPayload(content: string, messageType: string, clockValue: number, isJson = false) {\n  const tag: string = constants.messageTags.message;\n  const oneMonthInMs: number = 60 * 60 * 24 * 31 * 1000;\n  if (clockValue < (new Date().getTime())) {\n    clockValue = (new Date().getTime() + oneMonthInMs) * 100;\n  }\n\n  const contentType = (isJson ? \"content/json\" : \"text/plain\");\n  const timestamp = new Date().getTime();\n\n  return asciiToHex(\n    JSON.stringify([\n      tag,\n      [content, contentType, messageType, clockValue, timestamp, [\"^ \", \"~:text\", content]],\n    ]),\n  );\n}\n\nconst sig = new WeakMap();\n\nclass StatusJS {\n  private channels: any;\n  private contacts: any;\n  private userMessagesSubscription: any;\n  private mailservers: any;\n  private isHttpProvider: boolean;\n  private shh: any;\n  private chatRequestCb: any;\n\n  constructor() {\n    this.channels = {};\n    this.contacts = {};\n    this.userMessagesSubscription = null;\n    this.mailservers = null;\n    this.isHttpProvider = false;\n  }\n\n  public async connect(url: string, privateKey?: string) {\n    const web3: any = new Web3();\n    if (url.startsWith(\"ws://\")) {\n      web3.setProvider(new Web3.providers.WebsocketProvider(url, {headers: {Origin: \"statusjs\"}}));\n    } else if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n      // Deprecated but required for statusd\n      web3.setProvider(new Web3.providers.HttpProvider(url));\n      this.isHttpProvider = true;\n    } else {\n      const net = require(\"net\");\n      web3.setProvider(new Web3.providers.IpcProvider(url, net));\n    }\n\n    this.shh = web3.shh;\n    this.mailservers = new mailservers(web3);\n\n    await web3.shh.setMinPoW(constants.post.POW_TARGET);\n    sig.set(\n      this,\n      privateKey ? await this.generateWhisperKeyFromWallet(privateKey) : await web3.shh.newKeyPair(),\n    );\n  }\n\n  public isConnected() {\n    return this.shh.isListening();\n  }\n\n  private async generateWhisperKeyFromWallet(key: string) {\n    const keyId = await this.shh.addPrivateKey(key);\n    return keyId;\n  }\n\n  public async getPublicKey() {\n    const pubKey = await this.shh.getPublicKey(sig.get(this));\n    return pubKey;\n  }\n\n  public async getKeyId() {\n    return sig.get(this);\n  }\n\n  public async getUserName(pubKey?: any) {\n    if (!pubKey) {\n      pubKey = await this.getPublicKey();\n    }\n\n    return utils.generateUsernameFromSeed(pubKey);\n  }\n\n  public async joinChat(channelName: string, cb?: any) {\n    const channelKey = await this.shh.generateSymKeyFromPassword(channelName);\n    this.channels[channelName] = {\n      channelCode: Web3.utils.sha3(channelName).slice(0, 10),\n      channelKey,\n      channelName,\n      lastClockValue: 0,\n    };\n    if (cb) {\n      cb();\n    }\n  }\n\n  public async addContact(contactCode: string, cb?: any) {\n    this.contacts[contactCode] = {\n      lastClockValue: 0,\n      username: utils.generateUsernameFromSeed(contactCode),\n    };\n    if (cb) {\n      cb();\n    }\n  }\n\n  public leaveChat(channelName: string) {\n    if (!this.isHttpProvider) {\n      this.channels[channelName].subscription.unsubscribe();\n    } else {\n      this.shh.deleteMessageFilter(this.channels[channelName].filterId)\n        .then(() => {\n          clearInterval(this.channels[channelName].interval);\n        });\n    }\n    delete this.channels[channelName];\n  }\n\n  public async removeContact(contactCode: string) {\n    delete this.contacts[contactCode];\n  }\n\n  public isSubscribedTo(channelName: string) {\n    return !!this.channels[channelName];\n  }\n\n  public onMessage(par1: any, par2: any) {\n    if (typeof par1 === \"function\") {\n      this.onUserMessage(par1);\n    } else {\n      this.onChannelMessage(par1, par2);\n    }\n  }\n\n  public onChatRequest(cb: any) {\n    this.chatRequestCb = cb;\n  }\n\n  public onChannelMessage(channelName: string, cb: any) {\n    if (!this.channels[channelName]) {\n      return cb(\"unknown channel: \" + channelName);\n    }\n\n    const filters = {\n      allowP2P: true,\n      symKeyID: this.channels[channelName].channelKey,\n      topics: [this.channels[channelName].channelCode],\n    };\n\n    const messageHandler = (data: any) => {\n      const username = utils.generateUsernameFromSeed(data.sig);\n      const payloadArray = JSON.parse(hexToAscii(data.payload));\n      if (this.channels[channelName].lastClockValue < payloadArray[1][3]) {\n        this.channels[channelName].lastClockValue = payloadArray[1][3];\n      }\n      cb(null, {payload: hexToAscii(data.payload), data, username});\n    };\n\n    if (this.isHttpProvider) {\n      this.shh.newMessageFilter(filters)\n      .then((filterId: any) => {\n        this.channels[channelName].filterId = filterId;\n        this.channels[channelName].interval = setInterval(() => {\n          this.shh.getFilterMessages(filterId)\n          .then((data: any) => {\n            data.map((d: any) => {\n              messageHandler(d);\n            });\n          })\n          .catch((err: any) => { cb(err); });\n        }, 1000 * 2);\n      });\n    } else {\n      this.channels[channelName].subscription = this.shh.subscribe(\"messages\", filters)\n                                                              .on(\"data\", messageHandler)\n                                                              .on(\"error\", (err: any) => { cb(err); });\n    }\n  }\n\n  public onUserMessage(cb: any) {\n    const filters = {\n      allowP2P: true,\n      minPow: 0,\n      privateKeyID: sig.get(this),\n      topics: [constants.topics.CONTACT_DISCOVERY_TOPIC],\n    };\n\n    const messageHandler = (data: any) => {\n      if (!this.contacts[data.sig]) {\n        this.addContact(data.sig);\n      }\n\n      const payloadArray = JSON.parse(hexToAscii(data.payload));\n      if (this.contacts[data.sig].lastClockValue < payloadArray[1][3]) {\n        this.contacts[data.sig].lastClockValue = payloadArray[1][3];\n      }\n\n      if (payloadArray[0] === constants.messageTags.message) {\n        cb(null, {payload: hexToAscii(data.payload), data, username: this.contacts[data.sig].username});\n      } else if (payloadArray[0] === constants.messageTags.chatRequest) {\n        this.contacts[data.sig].displayName = payloadArray[1][0];\n        this.contacts[data.sig].profilePic = payloadArray[1][1];\n\n        if (this.chatRequestCb) {\n          this.chatRequestCb(null, {\n            displayName: this.contacts[data.sig].displayName,\n            profilePic: this.contacts[data.sig].profilePic,\n            username: this.contacts[data.sig].username,\n          });\n        }\n      }\n    };\n\n    if (this.isHttpProvider) {\n      this.shh.newMessageFilter(filters)\n      .then((filterId: any) => {\n        this.userMessagesSubscription = {};\n        this.userMessagesSubscription.filterId = filterId;\n        this.userMessagesSubscription.interval = setInterval(() => {\n          this.shh.getFilterMessages(filterId)\n          .then((data: any) => {\n            data.map((d: any) => {\n              messageHandler(d);\n            });\n          })\n          .catch((err: any) => { cb(err); });\n        }, 250);\n      });\n    } else {\n      this.userMessagesSubscription = this.shh.subscribe(\"messages\", filters)\n                                                     .on(\"data\", (data: any) => { messageHandler(data); })\n                                                     .on(\"error\", (err: any) => { cb(err); });\n    }\n  }\n\n  public sendUserMessage(contactCode: string, msg: string, cb?: any) {\n    if (!this.contacts[contactCode]) {\n      this.addContact(contactCode);\n    }\n    this.contacts[contactCode].lastClockValue++;\n\n    this.shh.post({\n      payload: createStatusPayload(msg, constants.messageTypes.USER_MESSAGE, this.contacts[contactCode].lastClockValue),\n      powTarget: constants.post.POW_TARGET,\n      powTime: constants.post.POW_TIME,\n      pubKey: contactCode,\n      sig: sig.get(this),\n      topic: constants.topics.CONTACT_DISCOVERY_TOPIC,\n      ttl: constants.post.TTL,\n    }).then(() => {\n      if (!cb) {\n        return;\n      }\n      cb(null, true);\n    }).catch((e: any) => {\n      if (!cb) {\n        return;\n      }\n      cb(e, false);\n    });\n  }\n\n  public sendGroupMessage(channelName: string, msg: string, cb?: any) {\n    if (!this.channels[channelName]) {\n      if (!cb) {\n        return;\n      }\n      return cb(\"unknown channel: \" + channelName);\n    }\n\n    this.channels[channelName].lastClockValue++;\n\n    this.shh.post({\n      payload: createStatusPayload(msg, constants.messageTypes.GROUP_MESSAGE, this.channels[channelName].lastClockValue),\n      powTarget: constants.post.POW_TARGET,\n      powTime: constants.post.POW_TIME,\n      sig: sig.get(this),\n      symKeyID: this.channels[channelName].channelKey,\n      topic: this.channels[channelName].channelCode,\n      ttl: constants.post.TTL,\n    }).then(() => {\n      if (!cb) {\n        return;\n      }\n      cb(null, true);\n    }).catch((e: any) => {\n      if (!cb) {\n        return;\n      }\n      cb(e, false);\n    });\n  }\n\n  public sendJsonMessage(destination: string, msg: string, cb?: any) {\n    if (constants.regExp.CONTACT_CODE_REGEXP.test(destination)) {\n      if (!this.contacts[destination]) {\n        this.addContact(destination);\n      }\n      this.contacts[destination].lastClockValue++;\n\n      this.shh.post({\n        payload: createStatusPayload(msg, constants.messageTypes.USER_MESSAGE, this.contacts[destination].lastClockValue, true),\n        powTarget: constants.post.POW_TARGET,\n        powTime: constants.post.POW_TIME,\n        pubKey: destination,\n        sig: sig.get(this),\n        topic: constants.topics.CONTACT_DISCOVERY_TOPIC,\n        ttl: constants.post.TTL,\n      }).then(() => {\n        if (!cb) {\n          return;\n        }\n        cb(null, true);\n      }).catch((e: any) => {\n        if (!cb) {\n          return;\n        }\n        cb(e, false);\n      });\n    } else {\n      this.channels[destination].lastClockValue++;\n\n      this.shh.post({\n        payload: createStatusPayload(JSON.stringify(msg), constants.messageTypes.GROUP_MESSAGE, this.channels[destination].lastClockValue, true),\n        powTarget: constants.post.POW_TARGET,\n        powTime: constants.post.POW_TIME,\n        sig: sig.get(this),\n        symKeyID: this.channels[destination].channelKey,\n        topic: this.channels[destination].channelCode,\n        ttl: constants.post.TTL,\n      }).then(() => {\n        if (!cb) {\n          return;\n        }\n        cb(null, true);\n      }).catch((e: any) => {\n        if (!cb) {\n          return;\n        }\n        cb(e, false);\n      });\n    }\n  }\n\n  public sendMessage(destination: string, msg: string, cb?: any) {\n    if (constants.regExp.CONTACT_CODE_REGEXP.test(destination)) {\n      this.sendUserMessage(destination, msg, cb);\n    } else {\n      this.sendGroupMessage(destination, msg, cb);\n    }\n  }\n\n}\n\nmodule.exports = StatusJS;\n"],"file":"index.js"}